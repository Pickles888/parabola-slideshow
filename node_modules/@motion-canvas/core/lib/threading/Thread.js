import { noop } from '../flow';
import { createSignal } from '../signals';
import { endThread, startThread, useLogger } from '../utils';
import { isThreadGenerator } from './ThreadGenerator';
import { getTaskName, setTaskName } from './names';
/**
 * A class representing an individual thread.
 *
 * @remarks
 * Thread is a wrapper for a generator that can be executed concurrently.
 *
 * Aside from the main thread, all threads need to have a parent.
 * If a parent finishes execution, all of its child threads are terminated.
 */
export class Thread {
    /**
     * The fixed time of this thread.
     *
     * @remarks
     * Fixed time is a multiple of the frame duration. It can be used to account
     * for the difference between this thread's {@link time} and the time of the
     * current animation frame.
     */
    get fixed() {
        return this.fixedTime;
    }
    /**
     * Check if this thread or any of its ancestors has been canceled.
     */
    get canceled() {
        return this.isCanceled || (this.parent?.canceled ?? false);
    }
    get paused() {
        return this.isPaused || (this.parent?.paused ?? false);
    }
    constructor(
    /**
     * The generator wrapped by this thread.
     */
    runner) {
        this.runner = runner;
        this.children = [];
        /**
         * The current time of this thread.
         *
         * @remarks
         * Used by {@link flow.waitFor} and other time-based functions to properly
         * support durations shorter than one frame.
         */
        this.time = createSignal(0);
        this.parent = null;
        this.isCanceled = false;
        this.isPaused = false;
        this.fixedTime = 0;
        this.queue = [];
        if (this.runner.task) {
            useLogger().error({
                message: `The generator "${getTaskName(this.runner)}" is already being executed by another thread.`,
                remarks: "<p>This usually happens when you mistakenly reuse a generator that is already\nrunning.</p>\n<p>For example, using <code>yield</code> here will run the opacity generator concurrently and\nstore it in the <code>task</code> variable (in case you want to cancel or await it later):</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> task = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);</code></pre><p>Trying to <code>yield</code> this task again will cause the current error:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span> task;</code></pre><p>Passing it to other flow functions will also cause the error:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(task);</code></pre><p>Try to investigate your code looking for <code>yield</code> statements whose return value\nis reused in this way. Here&#39;s an example of a common mistake:</p>\n<pre class=\"wrong\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), \n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">x</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">1</span>),\n);</code></pre><pre class=\"correct\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(\n  <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), \n  <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">x</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">1</span>),\n);</code></pre>",
            });
            this.runner = noop();
        }
        this.runner.task = this;
    }
    /**
     * Progress the wrapped generator once.
     */
    next() {
        if (this.paused) {
            return {
                value: null,
                done: false,
            };
        }
        startThread(this);
        const result = this.runner.next(this.value);
        endThread(this);
        this.value = null;
        return result;
    }
    /**
     * Prepare the thread for the next update cycle.
     *
     * @param dt - The delta time of the next cycle.
     */
    update(dt) {
        if (!this.paused) {
            this.time(this.time() + dt);
            this.fixedTime += dt;
        }
        this.children = this.children.filter(child => !child.canceled);
    }
    spawn(child) {
        if (!isThreadGenerator(child)) {
            child = child();
        }
        this.queue.push(child);
        return child;
    }
    add(child) {
        child.parent = this;
        child.isCanceled = false;
        child.time(this.time());
        child.fixedTime = this.fixedTime;
        this.children.push(child);
        setTaskName(child.runner, `unknown ${this.children.length}`);
    }
    drain(callback) {
        this.queue.forEach(callback);
        this.queue = [];
    }
    cancel() {
        this.runner.return();
        this.isCanceled = true;
        this.parent = null;
        this.drain(task => task.return());
    }
    pause(value) {
        this.isPaused = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhyZWFkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RocmVhZGluZy9UaHJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUMzRCxPQUFPLEVBQWtCLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFckUsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFakQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLE9BQU8sTUFBTTtJQWdCakI7Ozs7Ozs7T0FPRztJQUNILElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFRRDtJQUNFOztPQUVHO0lBQ2EsTUFBeUM7UUFBekMsV0FBTSxHQUFOLE1BQU0sQ0FBbUM7UUFoRHBELGFBQVEsR0FBYSxFQUFFLENBQUM7UUFNL0I7Ozs7OztXQU1HO1FBQ2EsU0FBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQXlCaEMsV0FBTSxHQUFrQixJQUFJLENBQUM7UUFDNUIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixhQUFRLEdBQUcsS0FB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