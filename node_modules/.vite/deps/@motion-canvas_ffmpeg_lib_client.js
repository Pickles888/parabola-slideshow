import {
  BoolMetaField,
  EventDispatcher,
  ObjectMetaField,
  makePlugin
} from "./chunk-NV7BVROQ.js";
import "./chunk-UXIASGQL.js";

// node_modules/@motion-canvas/ffmpeg/lib/client/FFmpegExporterClient.js
var _a;
var FFmpegExporterClient = class _FFmpegExporterClient {
  static meta(project) {
    return new ObjectMetaField(this.displayName, {
      fastStart: new BoolMetaField("fast start", true),
      includeAudio: new BoolMetaField("include audio", true).disable(!project.audio)
    });
  }
  static async create(project, settings) {
    return new _FFmpegExporterClient(project, settings);
  }
  constructor(project, settings) {
    this.project = project;
    this.settings = settings;
  }
  async start() {
    const options = this.settings.exporter.options;
    await this.invoke("start", {
      ...this.settings,
      ...options,
      audio: this.project.audio,
      audioOffset: this.project.meta.shared.audioOffset.get() - this.settings.range[0]
    });
  }
  async handleFrame(canvas) {
    await this.invoke("handleFrame", {
      data: canvas.toDataURL("image/png")
    });
  }
  async stop(result) {
    await this.invoke("end", result);
  }
  /**
   * Remotely invoke a method on the server and wait for a response.
   *
   * @param method - The method name to execute on the server.
   * @param data - The data that will be passed as an argument to the method.
   *               Should be serializable.
   */
  invoke(method, data) {
    if (import.meta.hot) {
      return new Promise((resolve, reject) => {
        const handle = (response) => {
          if (response.method !== method) {
            return;
          }
          _FFmpegExporterClient.response.unsubscribe(handle);
          if (response.status === "success") {
            resolve(response.data);
          } else {
            reject({
              message: "An error occurred while exporting the video.",
              remarks: `Method: ${method}<br>Server error: ${response.message}`,
              object: data
            });
          }
        };
        _FFmpegExporterClient.response.subscribe(handle);
        import.meta.hot.send("motion-canvas/ffmpeg", { method, data });
      });
    } else {
      throw new Error("FFmpegExporter can only be used locally.");
    }
  }
};
_a = FFmpegExporterClient;
FFmpegExporterClient.id = "@motion-canvas/ffmpeg";
FFmpegExporterClient.displayName = "Video (FFmpeg)";
FFmpegExporterClient.response = new EventDispatcher();
(() => {
  if (import.meta.hot) {
    import.meta.hot.on(`motion-canvas/ffmpeg-ack`, (response) => _a.response.dispatch(response));
  }
})();

// node_modules/@motion-canvas/ffmpeg/lib/client/index.js
var client_default = makePlugin({
  name: "ffmpeg-plugin",
  exporters() {
    return [FFmpegExporterClient];
  }
});
export {
  client_default as default
};
//# sourceMappingURL=@motion-canvas_ffmpeg_lib_client.js.map
